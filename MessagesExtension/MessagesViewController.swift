//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by 福田光祐 on 2016/10/10.
//  Copyright © 2016年 福田光祐. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    let ACCESS_TOKEN = "217249688.5ce6cda.a35a0b379d0a44fbb3f526628b3e724e"
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    @IBAction func tapSendBtn(_ sender: AnyObject) {
        let layout = MSMessageTemplateLayout()
        layout.image = UIImage(named: "image")
        
        let message = MSMessage(session: MSSession())
        message.layout = layout
        activeConversation?.insert(message, completionHandler: nil)
        
        
        // ユーザアカウント名
//        var user_account = Instagram.user_search("UserName")
    }
    
    

    @IBAction func tapBtn(_ sender: AnyObject) {
        // ユーザネームから固有のuser_IDを取得する。
        // String から NSMutableURLRequest
        let urlString = "https://api.instagram.com/v1/users/search?q=ko_suke24&access_token=\(ACCESS_TOKEN)"
        let myUrl = URL(string: urlString);
        let request = NSMutableURLRequest(url:myUrl!);
        request.httpMethod = "GET";
        
        // data取得
        let task = URLSession.shared.dataTask(with: request as URLRequest) { (data, response, error) in
            let anyObj: Any!
            do {
                if (data != nil) {
                    anyObj = try JSONSerialization.jsonObject(with: data!, options: [])
                    print("データがありました")
                    print("\(anyObj)")
                    // TODO: ライブラリを活用してJson型から要素を取得する
                    
                }else{
                    anyObj = nil
                    print("データがありませんでした")
                }
            } catch _ as NSError{
                anyObj = nil
            }
        }
        task.resume()
        print("タスク#resume")
    }
    
}
